{"version":3,"sources":["serviceWorker.js","component/counterMain.jsx","index.js"],"names":["Boolean","window","location","hostname","match","Gitui","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","userLogin","searchText","scrollActive","showloader","selectUser","setState","userlogin","map","list","selected","type","selectOrg","selectAll","getText","event","target","value","length","login","indexOf","checkuser","status","hightlightheader","isTop","document","addEventListener","scrollY","handleClick","bind","assertThisInitialized","_this2","axios","get","then","response","data","setTimeout","_this3","react_default","a","createElement","className","onClick","onChange","evt","index","key","src","avatar_url","alt","href","Component","ReactDOM","render","counterMain","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6d369643.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nclass Gitui extends Component {\r\n  state = {\r\n    userLogin: [],\r\n    searchText: \"\",\r\n    scrollActive: \"normal\",\r\n    showloader: true\r\n  };\r\n  constructor() {\r\n    super();\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.state.showloader = true;\r\n    this.handleClick();\r\n    this.hightlightheader();\r\n  }\r\n\r\n  handleClick() {\r\n    axios.get(\"https://api.github.com/users\").then(response => {\r\n      response.data.map(list => {\r\n        list.selected = true;\r\n      });\r\n      this.setState({ userLogin: response.data });\r\n      setTimeout(() => {\r\n        if (this.state.userLogin.length > 0) {\r\n          this.setState({ showloader: false });\r\n        }\r\n      }, 1000);\r\n    });\r\n  }\r\n  selectUser = () => {\r\n    this.setState(state => {\r\n      const userlogin = this.state.userLogin.map(list => {\r\n        list.selected = false;\r\n        if (list.type === \"User\") {\r\n          list.selected = true;\r\n        }\r\n      });\r\n      return { userlogin };\r\n    });\r\n  };\r\n  selectOrg = () => {\r\n    this.setState(state => {\r\n      const userlogin = this.state.userLogin.map(list => {\r\n        list.selected = false;\r\n        if (list.type === \"Organization\") {\r\n          list.selected = true;\r\n        }\r\n      });\r\n      return { userlogin };\r\n    });\r\n  };\r\n  selectAll = () => {\r\n    this.setState(state => {\r\n      const userlogin = this.state.userLogin.map(list => {\r\n        list.selected = true;\r\n      });\r\n      return { userlogin };\r\n    });\r\n  };\r\n  getText = event => {\r\n    const searchText = event.target.value;\r\n    this.setState({ searchText });\r\n    if (searchText.length > 0) {\r\n      this.setState(state => {\r\n        const userlogin = this.state.userLogin.map(list => {\r\n          list.selected = false;\r\n          if (list.login.indexOf(searchText) >= 0) {\r\n            list.selected = true;\r\n          }\r\n        });\r\n        return { userlogin };\r\n      });\r\n    } else {\r\n      this.setState(state => {\r\n        const userlogin = this.state.userLogin.map(list => {\r\n          list.selected = true;\r\n        });\r\n        return { userlogin };\r\n      });\r\n    }\r\n  };\r\n  checkuser = () => {\r\n    let status = 0;\r\n    this.state.userLogin.map(list => {\r\n      if (list.selected) {\r\n        status++;\r\n      }\r\n    });\r\n\r\n    return status;\r\n  };\r\n  hightlightheader = () => {\r\n    let isTop = \"\";\r\n    document.addEventListener(\"scroll\", () => {\r\n      isTop = window.scrollY > 60 ? \"activeheader\" : \"normale\";\r\n\r\n      this.setState({ scrollActive: isTop });\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <div\r\n        className={\r\n          \"container-fluid bodyWrapper \" +\r\n          (this.state.showloader ? \"showLoader\" : \"showWrapper\")\r\n        }\r\n      >\r\n        <div className=\"loader_dsg\">Loading....</div>\r\n        <div className=\"gitWrappercontainer\">\r\n          <div className={\"userSelect_dsg \" + this.state.scrollActive}>\r\n            <button\r\n              className=\"btn btn-success\"\r\n              onClick={() => this.selectAll()}\r\n            >\r\n              All\r\n            </button>\r\n            <button\r\n              className=\"btn btn-success\"\r\n              onClick={() => this.selectUser()}\r\n            >\r\n              User\r\n            </button>\r\n            <button\r\n              className=\"btn btn-success\"\r\n              onClick={() => this.selectOrg()}\r\n            >\r\n              Organization\r\n            </button>\r\n            <input\r\n              type=\"text\"\r\n              value={this.state.searchText}\r\n              onChange={evt => this.getText(evt)}\r\n            />\r\n          </div>\r\n          <h1 className=\"noInfo\">\r\n            {this.checkuser() ? \"\" : \"no user available\"}\r\n          </h1>\r\n          <div className=\"cardWrapper\">\r\n            {this.state.userLogin.map((list, index) =>\r\n              list.selected ? (\r\n                <div className=\"card userDesign\" key={index}>\r\n                  <h1 className=\"userName_dsg\">{list.login}</h1>\r\n                  <img\r\n                    className=\"card-img-top\"\r\n                    src={list.avatar_url}\r\n                    alt=\"Card image cap\"\r\n                  />\r\n                  <div className=\"card-body\">\r\n                    <h5 className=\"card-title\">{list.type}</h5>\r\n                    <p className=\"card-text\">\r\n                      Some quick example text to build on the card title and\r\n                      make up the bulk of the card's content.\r\n                    </p>\r\n                    <a href=\"#\" className=\"btn btn-primary\">\r\n                      Go somewhere\r\n                    </a>\r\n                  </div>\r\n                </div>\r\n              ) : (\r\n                \"\"\r\n              )\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Gitui;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Gitui from \"./component/counterMain\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nReactDOM.render(<Gitui />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}